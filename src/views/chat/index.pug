doctype html
html
  head
    title Chat Test
    script(src="https://cdn.socket.io/4.7.2/socket.io.min.js")
    style.
      body { font-family: Arial, sans-serif; padding: 20px; }
      #chat-box { border: 1px solid #ccc; height: 300px; overflow-y: auto; padding: 10px; margin-bottom: 10px; }
      #chat-box .me { color: #2b7; font-weight: bold; }
      #chat-box .other { color: #27b; font-weight: bold; }
      input, button { margin: 5px 0; padding: 5px; width: 100%; }
  body
    h2 Simple Chat Test
    input#tokenInput(type="text" placeholder="Enter JWT Token")
    button#connectBtn Connect
    hr
    div#chat-box
    input#receiverId(type="number" placeholder="Receiver ID")
    input#messageInput(type="text" placeholder="Type a message")
    button#sendBtn Send

    // Đưa script xuống cuối body
    script.
      document.addEventListener('DOMContentLoaded', () => {
        let socket;
        let userId;

        function parseJwt (token) {
          try { return JSON.parse(atob(token.split('.')[1])); } catch (e) { return {}; }
        }

        document.getElementById('connectBtn').addEventListener('click', () => {
          const token = document.getElementById('tokenInput').value.trim();
          if (!token) return alert("Enter token first!");

          const payload = parseJwt(token);
          userId = payload.sub;
          if (!userId) return alert("Invalid token!");

          socket = io("http://localhost:3000", { auth: { token } });

          socket.on("connect", () => {
            console.log("Connected as user:", userId);
            socket.emit("join", { userId });
          });

          socket.on("newMessage", (msg) => {
            const div = document.createElement('div');
            div.innerHTML = `<span class="${msg.senderId === userId ? 'me' : 'other'}">
              ${msg.senderId === userId ? 'You' : 'User ' + msg.senderId}:
            </span> ${msg.content}`;
            document.getElementById('chat-box').appendChild(div);
            document.getElementById('chat-box').scrollTop = document.getElementById('chat-box').scrollHeight;
          });
        });

        document.getElementById('sendBtn').addEventListener('click', () => {
          if (!socket || !socket.connected) return alert("Not connected!");
          const content = document.getElementById('messageInput').value.trim();
          const toReceiverId = parseInt(document.getElementById('receiverId').value);
          if (content && toReceiverId) {
            socket.emit("sendMessage", { toReceiverId, content });
            document.getElementById('messageInput').value = '';
          }
        });
      });
